// Code generated by genpjrpc. DO NOT EDIT.
//  genpjrpc version: v0.2.0

package generated

import (
	"context"
	"encoding/json"
	"fmt"

	pjrpc "gitlab.com/pjrpc/pjrpc/v2"
	"gitlab.com/pjrpc/pjrpc/v2/pjson"

	"github.com/rinatusmanov/jsonrpc20/internal/pkg/types"
)

// List of the server JSON-RPC methods.
const (
	JSONRPCMethodGetBalance          = "getBalance"
	JSONRPCMethodRollbackTransaction = "withdrawAndDeposit"
	JSONRPCMethodWithdrawAndDeposit  = "rollbackTransaction"
)

// SeamlessV2ServiceServer is an API server for SeamlessV2Service service.
type SeamlessV2ServiceServer interface {
	GetBalance(ctx context.Context, in *types.GetBalanceRequest) (*types.GetBalanceResponse, error)
	RollbackTransaction(ctx context.Context, in *types.RollbackTransactionRequest) (*types.RollbackTransactionResponse, error)
	WithdrawAndDeposit(ctx context.Context, in *types.WithdrawAndDepositRequest) (*types.WithdrawAndDepositResponse, error)
}

type regSeamlessV2Service struct {
	svc SeamlessV2ServiceServer
}

// RegisterSeamlessV2ServiceServer registers rpc handlers with middlewares in the server router.
func RegisterSeamlessV2ServiceServer(srv pjrpc.Registrator, svc SeamlessV2ServiceServer, middlewares ...pjrpc.Middleware) {
	r := &regSeamlessV2Service{svc: svc}

	srv.RegisterMethod(JSONRPCMethodGetBalance, r.regGetBalance)
	srv.RegisterMethod(JSONRPCMethodRollbackTransaction, r.regRollbackTransaction)
	srv.RegisterMethod(JSONRPCMethodWithdrawAndDeposit, r.regWithdrawAndDeposit)

	srv.With(middlewares...)
}

func (r *regSeamlessV2Service) regGetBalance(ctx context.Context, params json.RawMessage) (interface{}, error) {
	in := new(types.GetBalanceRequest)
	if params != nil {
		if err := pjson.Unmarshal(params, in); err != nil {
			return nil, pjrpc.JRPCErrParseError("failed to parse params")
		}
	}

	res, err := r.svc.GetBalance(ctx, in)
	if err != nil {
		return nil, fmt.Errorf("failed GetBalance: %w", err)
	}

	return res, nil
}

func (r *regSeamlessV2Service) regRollbackTransaction(ctx context.Context, params json.RawMessage) (interface{}, error) {
	in := new(types.RollbackTransactionRequest)
	if params != nil {
		if err := pjson.Unmarshal(params, in); err != nil {
			return nil, pjrpc.JRPCErrParseError("failed to parse params")
		}
	}

	res, err := r.svc.RollbackTransaction(ctx, in)
	if err != nil {
		return nil, fmt.Errorf("failed RollbackTransaction: %w", err)
	}

	return res, nil
}

func (r *regSeamlessV2Service) regWithdrawAndDeposit(ctx context.Context, params json.RawMessage) (interface{}, error) {
	in := new(types.WithdrawAndDepositRequest)
	if params != nil {
		if err := pjson.Unmarshal(params, in); err != nil {
			return nil, pjrpc.JRPCErrParseError("failed to parse params")
		}
	}

	res, err := r.svc.WithdrawAndDeposit(ctx, in)
	if err != nil {
		return nil, fmt.Errorf("failed WithdrawAndDeposit: %w", err)
	}

	return res, nil
}
